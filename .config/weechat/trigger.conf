#
# weechat -- trigger.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use /set or similar command to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart
#

[look]
enabled = on
monitor_strip_colors = off

[color]
flag_command = lightgreen
flag_conditions = yellow
flag_post_action = lightblue
flag_regex = lightcyan
flag_return_code = lightmagenta
regex = white
replace = cyan
trigger = green
trigger_disabled = red

[trigger]
autosort_refresh_on_setdict.arguments = "spell.dict.*;spell.check.default_dict"
autosort_refresh_on_setdict.command = "/mute /autosort"
autosort_refresh_on_setdict.conditions = ""
autosort_refresh_on_setdict.enabled = on
autosort_refresh_on_setdict.hook = config
autosort_refresh_on_setdict.post_action = none
autosort_refresh_on_setdict.regex = ""
autosort_refresh_on_setdict.return_code = ok
beep.arguments = ""
beep.command = "/print -beep"
beep.conditions = "${tg_displayed} && (${tg_highlight} || ${tg_msg_pv})"
beep.enabled = on
beep.hook = print
beep.post_action = none
beep.regex = ""
beep.return_code = ok
buflist_fold_symbol_click.arguments = "1001|buflist_mouse"
buflist_fold_symbol_click.command = "/toggle_bufautoset localvar_set_fold ${full_name}"
buflist_fold_symbol_click.conditions = "${localvar_type} == server && ${plugins.var.buflist_subsection_fold} != && (${plugins.var.buflist_subsection_buffer_number} != && ${_bar_item_col} == ${lengthscr:${buffer[last_gui_buffer].number}.} || ${plugins.var.buflist_subsection_buffer_number} == && ${_bar_item_col} == 0)"
buflist_fold_symbol_click.enabled = on
buflist_fold_symbol_click.hook = hsignal
buflist_fold_symbol_click.post_action = none
buflist_fold_symbol_click.regex = ""
buflist_fold_symbol_click.return_code = ok_eat
buflist_refresh_options.arguments = "weechat.bar.buflist.size*;plugins.var.buflist_*"
buflist_refresh_options.command = "/buflist refresh"
buflist_refresh_options.conditions = ""
buflist_refresh_options.enabled = on
buflist_refresh_options.hook = config
buflist_refresh_options.post_action = none
buflist_refresh_options.regex = ""
buflist_refresh_options.return_code = ok
buflist_resize.arguments = "buflist_resize"
buflist_resize.command = "/mute /set plugins.var.buflist_section_${my_modified_section} ${my_modified_section_size};/bar set ${_bar_name} size ${my_new_bar_size}"
buflist_resize.conditions = "${_key}=~down || ${_key}=~up && (${_bar_item_col} < ${plugins.var.buflist_section_1st} && ${plugins.var.buflist_section_1st} > 1 || ${_bar_item_col} >= ${plugins.var.buflist_section_1st} && ${plugins.var.buflist_section_2nd} > 1)"
buflist_resize.enabled = on
buflist_resize.hook = hsignal
buflist_resize.post_action = none
buflist_resize.regex = "/.*/${if:${_key}=~up$?-:+}/my_action /.*/${if:${_bar_item_col}<${plugins.var.buflist_section_1st}?1st:2nd}/my_modified_section /.*/${calc:${plugins.var.buflist_section_${my_modified_section}} ${my_action} 1}/my_modified_section_size /.*/${if:${weechat.bar.${_bar_name}.size}!=?${calc:${weechat.bar.${_bar_name}.size} ${my_action} 1}:0}/my_new_bar_size"
buflist_resize.return_code = ok
buflist_tools.arguments = "buflist_tools;manage pascalpoitras's custom buflist (https://gist.github.com/pascalpoitras/8406501);resize <buflist_size> <1st_section_size>|? [<2nd_section_size>] || hide|show|toggle|showonly|hideonly <subsection>|-old|-new|-all [<subsection>|-old|-new|-all...];          resize: resize the buflist size and the two sections${\n}            hide: hide one or more subsection(s)${\n}            show: show one or more subsection(s)${\n}          toggle: toggle one or more subsection(s)${\n}        showonly: hide all subsections except...${\n}        hideonly: show all subsections except...${\n}    buflist_size: new size for the buflist${\n}1st_section_size: size of first section${\n}2nd_section_size: size of second section${\n}      subsection: a subsection (buffer_number, fold, indent, nick_prefix, buffer_name, lag, filter, relay_count, extra, hotlist)${\n}            -old: only the old buflist subsections (buffer_number, indent, buffer_name, filter, relay_count, extra, hotlist)${\n}            -new: only the new buflist subsections (fold, nick_prefix, lag)${\n}            -all: do action on all subsections${\n}${\n}The buflist is composed of two sections. The first one is composed of nine subsections. The buffer number, the fold symbol (servers only), the indentation, the nick prefix (channels only), the buffer name, the lag (servers only), the filter (on some buffer like fset, scripts...), the relay count (for the relay buffer) and extra infos about a buffer. The second section is only composed of hotlist. The two sections can be resized independently. If you want to hide a subsection, for example, buffer_number, the bar will not be resized and the section will not be resized too. So you will have more space for the other subsection of the first section. If you want to hide the hotlist, you can use the hide command but then the second subsection will be empty and use space for nothing, space that cant be used by the first section. So if you want to hide the hotlist, you'd be better off using resize and give all the spaces to the first section. TLDR if you're not gonna use the hotlist, do not reserve space for it in the first place.${\n}${\n}Exemples:${\n}  Resize the bar to 20 with the size 15 for first section and 5 for second section:${\n}    /buflist_tools resize 20 15${\n}  Show only the subsections that was available in the old buflist:${\n}    /buflist_tools showonly -old;resize 25 || show|hide|toggle|hideonly|showonly buffer_number|fold|indent|nick_prefix|buffer_name|lag|filter|relay_count|extra|hotlist|-old|-new|-all|%*"
buflist_tools.command = "/eval -s ${if:${my_action}==resize?/mute /set plugins.var.buflist_section_1st ${tg_argv3}\;/mute /set plugins.var.buflist_section_2nd ${tg_argv4}\;/bar set buflist size ${tg_argv2}:${my_cmds_to_run}}"
buflist_tools.conditions = "${tg_argv1} =~ ^(hide|show|toggle|showonly|hideonly)$ && ${tg_argv_eol2} =~ ^((buffer_number|fold|indent|nick_prefix|buffer_name|lag|filter|relay_count|extra|hotlist|-old|-new|-all)( +|$))+$ || ${tg_argv1} == resize && ${tg_argv2} =~ ^[0-9]+$ && (${tg_argv3} =~ ^[0-9]+$ && ${tg_argv4} =~ ^[0-9]*$ || ${tg_argv3} == ? && ${tg_argv4} =~ ^[0-9]+$)"
buflist_tools.enabled = on
buflist_tools.hook = command
buflist_tools.post_action = none
buflist_tools.regex = "/.*/${tg_argv1}/my_action /\?/${calc:${tg_argv2}-${tg_argv4}}/tg_argv3 /^$/${if:${my_action}==resize?${calc:${tg_argv2}-${tg_argv3}}}/tg_argv4 /-all/-new -old/tg_argv_eol2 /-old/buffer_number indent buffer_name filter relay_count extra hotlist/tg_argv_eol2 /-new/fold nick_prefix lag/tg_argv_eol2 /.*/${if:${my_action}=~^(hide|show)only$?buffer_number fold indent nick_prefix buffer_name lag filter relay_count extra hotlist}/my_hide_or_show_everything ===buffer_number|fold|indent|nick_prefix|buffer_name|lag|filter|relay_count|extra|hotlist===/mute /set plugins.var.buflist_subsection_${re:0} ${if:${my_action}==hideonly};===my_hide_or_show_everything ===buffer_number|fold|indent|nick_prefix|buffer_name|lag|filter|relay_count|extra|hotlist===/mute /set plugins.var.buflist_subsection_${re:0} ${if:${my_action}=~^hide?0:${if:${my_action}=~^show?1:\x5c${if:\x5c${plugins.var.buflist_subsection_${re:0}${\x5cx7d}?0:1${\x5cx7d}}};===tg_argv_eol2 /.*/${my_hide_or_show_everything}${tg_argv_eol2}/my_cmds_to_run"
buflist_tools.return_code = ok
chanmon.arguments = "*;irc_privmsg,matrix_message"
chanmon.command = "/print -newbuffer ${tg_trigger_name} -tags ${tg_tags} \t${my_list}${tg_message}"
chanmon.conditions = "${info:version_number} >= 50397184 && ${buffer.local_variables.type} == channel && ${buffer.local_variables.no_chanmon_like} =="
chanmon.enabled = on
chanmon.hook = print
chanmon.post_action = none
chanmon.regex = "/.*/${tg_date}/my_date_only /(.*) .*/${re:1}/my_date_only /.*/${tg_date}/my_time_only /.* (.*)/${re:1}/my_time_only /.*/${channel}/my_channel_no_prefix /^.(.)(.*)/${if:${re:1}==#&&${info:irc_server_isupport_value,${server},NETWORK}==freenode?:${re:1}}${re:2}/my_channel_no_prefix /.*/plugins.var.${tg_trigger_name}.general/my_general_prefix /.*/${if:${length:${${my_general_prefix}.bg}}!=?${${my_general_prefix}.bg}:red}/my_default_bg /.*/default/my_end.bg /.*/${plugins.var.${tg_trigger_name}.list}/my_list /[^,]+/${if:${re:0}=~^[[:alnum:]_]+$?${re:0}}/my_list /[^,]+/plugins.var.${tg_trigger_name}.section.${re:0}/my_list /[^,]+/${if:${eval_cond:${if:${length:${${re:0}.condition}}!=?${${re:0}.condition}:${if:${length:${${my_general_prefix}.condition}}!=?${${my_general_prefix}.condition}:1}}}!=?${re:0}}/my_list /[^,]+/${re:0},${re:0}/my_list /^,*[^,]+(.*)/${re:1}/my_list /.*[^,].*/${re:0},my_end/my_list /[^,]+/${if:${length:${${re:0}.fg}}!=?${re:0}.fg:${my_general_prefix}.fg},${if:${length:${${re:0}.bg}}!=?${re:0}.bg:my_default_bg},${if:${length:${${re:0}.samesep}}!=?${re:0}.samesep:${my_general_prefix}.samesep},${if:${length:${${re:0}.len}}!=?${re:0}.len:${my_general_prefix}.len},${re:0}.content/my_list /,+/,/my_list /^,|,$//my_list /([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)()()()()(),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)(,|$)/${color:${eval:${${re:1}},${eval:${${re:2}}}}} ${if:${eval:${${re:4}}}=~^[0-9]+$&&${eval:${${re:4}}}!=?${if:${lengthscr:${eval:${${re:5}}}}>=${eval:${${re:4}}}?${cutscr:+${eval:${${re:4}}},…,${eval:${${re:5}}}}:${eval:${${re:5}}}${repeat:${calc:${eval:${${re:4}}}-${lengthscr:${eval:${${re:5}}}}}, }}:${eval:${${re:5}}}}${color:${eval:${${re:1}},${eval:${${re:2}}}}} ${if:${color:${eval:${${re:2}}}}==${color:${eval:${${re:12}}}}?${color:${eval:${${re:3}}}}:${color:${eval:${${re:2}},${eval:${${re:12}}}}}}${color:reset}/my_list /.+/${re:0} /my_list"
chanmon.return_code = ok
chanmon_tools.arguments = "chanmon_tools;manage the powerline bar for ${cut:7,,${tg_trigger_name}};set <option> <value> || section add [-fg|-bg|-samesep|-len|-condition <value>] <section> <position> <content> || section del <section> [<section>...] || section set <section> <section_opt> <value> || section list|clear || list push|remove|replace|unshift <section> [<section>...] || list pop|shift|clear;          set: set a general option${\n}  section add: add a new section${\n}  section del: delete one or more sections${\n}  section set: change a section option${\n} section list: list all options from all sections${\n}section clear: delete all sections${\n}     list pop: remove the last section in the list${\n}    list push: put one or more sections at the end of the list${\n}   list shift: remove the first section in the list${\n}   list clear: clear the list${\n}  list remove: remove one or more sections in the list${\n} list unshift: put one or more sections at the beginning of the list${\n} list replace: replace the list${\n}          -fg: set the foreground color${\n}          -bg: set the background color${\n}     -samesep: foreground color for the separator used when two consecutives sections have the same background color${\n}   -condition: condition to display the section${\n}         -len: set the length (0 for unlimited)${\n}      section: name of the section${\n}     position: 'start' to insert the section at the start of the list, 'end' to add the section at the end of the list${\n}      content: content to display in the section${\n}       option: name of option: fg, bg, samesep, len, condition${if:${cut:7,,${tg_trigger_name}}==newsmon?, keep_url, keep_date}.${\n}  section_opt: name of option: fg, bg, samesep, len, condition, content.${\n}        value: new value for the option${\n}${\n}This command manages the look of the powerline bar displayed in front of each message in the ${cut:7,,${tg_trigger_name}} buffer${if:${cut:7,,${tg_trigger_name}}==newsmon? (and also let you show or hide the url and date in the message itself)}. The section subcommand manages the sections while the list subcommand manages the list of the displayed sections. A section may exist without being in the list. In this case the section will not be displayed. But even if a section is in the list, the section will appears only if the condition of the section gives true. This condition is evaluated on each new message, so depending on the message, the section will or will not be displayed. All options are evaluated. You can't use space or start the value with a - when using section add. To overcome this, use section set instead. In addition to all the variables from the print trigger, the following variables are available for you to use in any option: ${if:${cut:7,,${tg_trigger_name}}==newsmon?my_site_and_sections, my_site, my_title, my_date, my_url, my_url_encode, }my_date_only, my_time_only and my_channel_no_prefix.${\n}${\n}Exemples:${\n}  Add three sections and display them:${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 3 serv end \${server}${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 4 chan end \${my_channel_no_prefix}${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 5 nick end \${tg_tag_nick}${\n}  ${color:white,24} fr… ${color:black}${color:white} wee… ${color:black}${color:white} r3m ${color:24,default};set fg|bg|samesep|len|condition${if:${cut:7,,${tg_trigger_name}}==newsmon?|keep_url|keep_date} || section add|del|set|list|clear || list push|remove|replace|unshift|pop|shift|clear"
chanmon_tools.command = "/eval -s ${my_cmds_to_run}"
chanmon_tools.conditions = "${info:version_number} >= 50397184 && ${tg_argv_eol1} =~ ^set +[[:alnum:]_]+ . || ${tg_argv_eol1} =~ ^section +add +(-(fg|bg|samesep|len|condition) +[^- ][^ ]* +)*[[:alnum:]_]+ +(start|end|none) +. || ${tg_argv_eol1} =~ ^section +set +[[:alnum:]_]+ (fg|bg|samesep|len|condition|content) . || ${tg_argv_eol1} =~ ^section +(list|clear)$ || ${tg_argv_eol1} =~ ^section +del +[[:alnum:]_ ]+$ ||${tg_argv_eol1} =~ ^list +(shift|pop|clear)$ || ${tg_argv_eol1} =~ ^list +(unshift|push|replace|remove) +[[:alnum:]_ ]+$"
chanmon_tools.enabled = on
chanmon_tools.hook = command
chanmon_tools.post_action = none
chanmon_tools.regex = "/.*/${tg_trigger_name}/my_buffer /_tools$//my_buffer /.*/${tg_argv1}${if:${tg_argv1}!=set? ${tg_argv2}}/my_command /;/\x5c;/tg_argv_eol3 /;/\x5c;/tg_argv_eol5 /\$\{/${\x5cx5c}${re:0}/tg_argv_eol3 /\$\{/${\x5cx5c}${re:0}/tg_argv_eol5 /.*/${if:${my_command}==section add&&${tg_argv_eol3}=~^-?${tg_argv_eol3}}/my_opt_args /( [^- ][^ ]* +)[[:alnum:]_]+ .*/${re:1}/my_opt_args /.*/${tg_argv_eol3}/my_required_args /^-[^ ]+ +[^ ]+ +//my_required_args /.*/${my_required_args}/my_position /^[^ ]+ +([^ ]+).*/${re:1}/my_position /.*/${my_required_args}/my_content /^[^ ]+ +[^ ]+ +(.*)/${re:1}/my_content /.*/${if:${my_command}==section add?${if:${my_position}==start?unshift:${if:${my_position}==end?push}}:${if:${my_command}==section del?remove:${if:${my_command}==section clear?clear:${if:${tg_argv1}==list?${tg_argv2}}}}}/my_list_action /.*/${my_required_args}/my_sections /^([^ ]+).*/${if:${my_command}=~^section (add|set)$?${re:1}:${re:0}}/my_sections /.+/,${re:0},/my_sections / +/,/my_sections /.*/${plugins.var.${my_buffer}.list}/my_list /[^,]+/${if:${re:0}=~^[[:alnum:]_]+$?${re:0}}/my_list /[^,]+(.*)/${if:${my_list_action}==shift?${re:1}:${re:0}}/my_list /(^|,)[^,]+,*$/${if:${my_list_action}==pop?:${re:0}}/my_list /.*/${if:${my_list_action}==unshift?${my_sections}}${re:0}/my_list /.*/${re:0}${if:${my_list_action}==push?${my_sections}}/my_list /[^,]+/${if:${my_list_action}==remove&&${my_sections}=-,${re:0},?:${re:0}}/my_list /.*/${if:${my_list_action}==replace?${my_sections}:${re:0}}/my_list /.*/${if:${my_list_action}==clear?:${re:0}}/my_list /,+/,/my_list /^,|,$//my_list /^,|,$//my_sections ===$===${if:${my_command}==set?/mute /set plugins.var.${my_buffer}.general.${tg_argv2} ${tg_argv_eol3};}===my_cmds_to_run ===$===${if:${my_command}==section set?/mute /set plugins.var.${my_buffer}.section.${tg_argv3}.${tg_argv4} ${tg_argv_eol5};}===my_cmds_to_run ===-([^ ]+) +([^ ]+) +===/mute /set plugins.var.${my_buffer}.section.${my_sections}.${re:1} ${re:2};===my_opt_args ===$===${if:${my_command}==section add?${my_opt_args};/mute /set plugins.var.${my_buffer}.section.${my_sections}.content ${my_content};}===my_cmds_to_run ===$===${if:${my_command}==section list?/mute /set plugins.var.${my_buffer}.section.*;}===my_cmds_to_run /.*/${my_sections}/my_delete_sections ===([^,]+)(,|$)===/mute /unset -mask plugins.var.${my_buffer}.section.${re:1}.*;===my_delete_sections ===$===${if:${my_command}==section del?${my_delete_sections}}===my_cmds_to_run ===$===${if:${my_command}==section clear?/mute /unset -mask plugins.var.${my_buffer}.section.*;}===my_cmds_to_run ===$===${if:${my_list_action}!=?/mute /set plugins.var.${my_buffer}.list \"${my_list}\";}===my_cmds_to_run"
chanmon_tools.return_code = ok
cmd_pass.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass.command = ""
cmd_pass.conditions = ""
cmd_pass.enabled = on
cmd_pass.hook = modifier
cmd_pass.post_action = none
cmd_pass.regex = "==^((/(msg|m|quote) +(-server +[^ ]+ +)?nickserv +(id|identify|set +password|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)|/oper +[^ ]+ +|/quote +pass +|/secure +(passphrase|decrypt|set +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
cmd_pass.return_code = ok
cmd_pass_register.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass_register.command = ""
cmd_pass_register.conditions = ""
cmd_pass_register.enabled = on
cmd_pass_register.hook = modifier
cmd_pass_register.post_action = none
cmd_pass_register.regex = "==^(/(msg|m|quote) +nickserv +register +)([^ ]+)(.*)==${re:1}${hide:*,${re:3}}${re:4}"
cmd_pass_register.return_code = ok
conky.arguments = "weechat_print"
conky.command = ""
conky.conditions = "${tg_buffer} == exec.exec.conky && ${tg_tags} =~ ,exec_stdout, && ${tg_message_nocolor} =~ ^[^:]+: *[^ ]"
conky.enabled = on
conky.hook = modifier
conky.post_action = none
conky.regex = "/^ \t([^:]+):(.*)/ ${color:_31}${re:1}\t${color:reset}${re:2}/ /.*/${tg_message_nocolor}/my_field /.*/${tg_message_nocolor}/my_value /^([^:]+):.*/${re:1}/my_field / /_/my_field /^[^:]+: */${re:1}/my_value"
conky.return_code = ok
control_buffers_change_control_window.arguments = "plugins.var.control_buffers_window"
control_buffers_change_control_window.command = "/window refresh"
control_buffers_change_control_window.conditions = ""
control_buffers_change_control_window.enabled = on
control_buffers_change_control_window.hook = config
control_buffers_change_control_window.post_action = none
control_buffers_change_control_window.regex = ""
control_buffers_change_control_window.return_code = ok
day_changed_upgrade_scripts.arguments = "day_changed"
day_changed_upgrade_scripts.command = "/script update;/wait 10s /script upgrade"
day_changed_upgrade_scripts.conditions = ""
day_changed_upgrade_scripts.enabled = on
day_changed_upgrade_scripts.hook = signal
day_changed_upgrade_scripts.post_action = none
day_changed_upgrade_scripts.regex = ""
day_changed_upgrade_scripts.return_code = ok
devinfo.arguments = "devinfo"
devinfo.command = "/print -current -escape ${out}"
devinfo.conditions = "${err} == && ${info:python_version} !="
devinfo.enabled = on
devinfo.hook = hsignal
devinfo.post_action = none
devinfo.regex = "/(?n)^stable:(.*)/${re:0}${if:${info:version}!~-(dev|rc[0-9]+)? ${if:${re:1}==${info:version}?${color:121}(as mine!):${color:163}(mine is ${info:version})}}/out /(?n)^devel:(.*)/${re:0}${if:${info:version}=~-(dev|rc[0-9]+)? ${if:${re:1}==${info:version}?${color:121}(as mine!):${color:163}(mine is ${info:version})}}/out /.*/${info:version_git}/my_git /^[^g]+g(.*)/${re:1}/my_git /(?n)^git:(.*)/${re:0}${if:${info:version}=~-(dev|rc[0-9]+)? ${if:${cut:${length:${my_git}},,${re:1}}==${my_git}?${color:121}(as mine!):${color:163}(mine is ${info:version_git})}}/out /(?n)^(stable_date:)(.*)/${re:1}${info:date_preferred,${re:2}} (since ${info:date_calc_days,${re:2}} days)/out /(?n)^(next_stable_date:)(.*)/${re:1}${info:date_preferred,${re:2}} (${info:date_calc_days,${re:2}} days left)/out /_/ /out /(?n)^([^:]+:)(.*)/${color:31}${re:1} ${color:default}${re:2}/out /\n/\x5cn/out"
devinfo.return_code = ok
highmon.arguments = "*;irc_privmsg,matrix_message"
highmon.command = "/print -newbuffer ${tg_trigger_name} -tags ${tg_tags} \t${my_list}${tg_message}"
highmon.conditions = "${info:version_number} >= 50397184 && ${tg_highlight} == 1 && ${tg_displayed} == 1 && ${buffer.local_variables.type} == channel"
highmon.enabled = on
highmon.hook = print
highmon.post_action = none
highmon.regex = "/.*/${tg_date}/my_date_only /(.*) .*/${re:1}/my_date_only /.*/${tg_date}/my_time_only /.* (.*)/${re:1}/my_time_only /.*/${channel}/my_channel_no_prefix /^.(.)(.*)/${if:${re:1}==#&&${info:irc_server_isupport_value,${server},NETWORK}==freenode?:${re:1}}${re:2}/my_channel_no_prefix /.*/plugins.var.${tg_trigger_name}.general/my_general_prefix /.*/${if:${length:${${my_general_prefix}.bg}}!=?${${my_general_prefix}.bg}:red}/my_default_bg /.*/default/my_end.bg /.*/${plugins.var.${tg_trigger_name}.list}/my_list /[^,]+/${if:${re:0}=~^[[:alnum:]_]+$?${re:0}}/my_list /[^,]+/plugins.var.${tg_trigger_name}.section.${re:0}/my_list /[^,]+/${if:${eval_cond:${if:${length:${${re:0}.condition}}!=?${${re:0}.condition}:${if:${length:${${my_general_prefix}.condition}}!=?${${my_general_prefix}.condition}:1}}}!=?${re:0}}/my_list /[^,]+/${re:0},${re:0}/my_list /^,*[^,]+(.*)/${re:1}/my_list /.*[^,].*/${re:0},my_end/my_list /[^,]+/${if:${length:${${re:0}.fg}}!=?${re:0}.fg:${my_general_prefix}.fg},${if:${length:${${re:0}.bg}}!=?${re:0}.bg:my_default_bg},${if:${length:${${re:0}.samesep}}!=?${re:0}.samesep:${my_general_prefix}.samesep},${if:${length:${${re:0}.len}}!=?${re:0}.len:${my_general_prefix}.len},${re:0}.content/my_list /,+/,/my_list /^,|,$//my_list /([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)()()()()(),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)(,|$)/${color:${eval:${${re:1}},${eval:${${re:2}}}}} ${if:${eval:${${re:4}}}=~^[0-9]+$&&${eval:${${re:4}}}!=?${if:${lengthscr:${eval:${${re:5}}}}>=${eval:${${re:4}}}?${cutscr:+${eval:${${re:4}}},…,${eval:${${re:5}}}}:${eval:${${re:5}}}${repeat:${calc:${eval:${${re:4}}}-${lengthscr:${eval:${${re:5}}}}}, }}:${eval:${${re:5}}}}${color:${eval:${${re:1}},${eval:${${re:2}}}}} ${if:${color:${eval:${${re:2}}}}==${color:${eval:${${re:12}}}}?${color:${eval:${${re:3}}}}:${color:${eval:${${re:2}},${eval:${${re:12}}}}}}${color:reset}/my_list /.+/${re:0} /my_list"
highmon.return_code = ok
highmon_tools.arguments = "highmon_tools;manage the powerline bar for ${cut:7,,${tg_trigger_name}};set <option> <value> || section add [-fg|-bg|-samesep|-len|-condition <value>] <section> <position> <content> || section del <section> [<section>...] || section set <section> <section_opt> <value> || section list|clear || list push|remove|replace|unshift <section> [<section>...] || list pop|shift|clear;          set: set a general option${\n}  section add: add a new section${\n}  section del: delete one or more sections${\n}  section set: change a section option${\n} section list: list all options from all sections${\n}section clear: delete all sections${\n}     list pop: remove the last section in the list${\n}    list push: put one or more sections at the end of the list${\n}   list shift: remove the first section in the list${\n}   list clear: clear the list${\n}  list remove: remove one or more sections in the list${\n} list unshift: put one or more sections at the beginning of the list${\n} list replace: replace the list${\n}          -fg: set the foreground color${\n}          -bg: set the background color${\n}     -samesep: foreground color for the separator used when two consecutives sections have the same background color${\n}   -condition: condition to display the section${\n}         -len: set the length (0 for unlimited)${\n}      section: name of the section${\n}     position: 'start' to insert the section at the start of the list, 'end' to add the section at the end of the list${\n}      content: content to display in the section${\n}       option: name of option: fg, bg, samesep, len, condition${if:${cut:7,,${tg_trigger_name}}==newsmon?, keep_url, keep_date}.${\n}  section_opt: name of option: fg, bg, samesep, len, condition, content.${\n}        value: new value for the option${\n}${\n}This command manages the look of the powerline bar displayed in front of each message in the ${cut:7,,${tg_trigger_name}} buffer${if:${cut:7,,${tg_trigger_name}}==newsmon? (and also let you show or hide the url and date in the message itself)}. The section subcommand manages the sections while the list subcommand manages the list of the displayed sections. A section may exist without being in the list. In this case the section will not be displayed. But even if a section is in the list, the section will appears only if the condition of the section gives true. This condition is evaluated on each new message, so depending on the message, the section will or will not be displayed. All options are evaluated. You can't use space or start the value with a - when using section add. To overcome this, use section set instead. In addition to all the variables from the print trigger, the following variables are available for you to use in any option: ${if:${cut:7,,${tg_trigger_name}}==newsmon?my_site_and_sections, my_site, my_title, my_date, my_url, my_url_encode, }my_date_only, my_time_only and my_channel_no_prefix.${\n}${\n}Exemples:${\n}  Add three sections and display them:${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 3 serv end \${server}${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 4 chan end \${my_channel_no_prefix}${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 5 nick end \${tg_tag_nick}${\n}  ${color:white,24} fr… ${color:black}${color:white} wee… ${color:black}${color:white} r3m ${color:24,default};set fg|bg|samesep|len|condition${if:${cut:7,,${tg_trigger_name}}==newsmon?|keep_url|keep_date} || section add|del|set|list|clear || list push|remove|replace|unshift|pop|shift|clear"
highmon_tools.command = "/eval -s ${my_cmds_to_run}"
highmon_tools.conditions = "${info:version_number} >= 50397184 && ${tg_argv_eol1} =~ ^set +[[:alnum:]_]+ . || ${tg_argv_eol1} =~ ^section +add +(-(fg|bg|samesep|len|condition) +[^- ][^ ]* +)*[[:alnum:]_]+ +(start|end|none) +. || ${tg_argv_eol1} =~ ^section +set +[[:alnum:]_]+ (fg|bg|samesep|len|condition|content) . || ${tg_argv_eol1} =~ ^section +(list|clear)$ || ${tg_argv_eol1} =~ ^section +del +[[:alnum:]_ ]+$ ||${tg_argv_eol1} =~ ^list +(shift|pop|clear)$ || ${tg_argv_eol1} =~ ^list +(unshift|push|replace|remove) +[[:alnum:]_ ]+$"
highmon_tools.enabled = on
highmon_tools.hook = command
highmon_tools.post_action = none
highmon_tools.regex = "/.*/${tg_trigger_name}/my_buffer /_tools$//my_buffer /.*/${tg_argv1}${if:${tg_argv1}!=set? ${tg_argv2}}/my_command /;/\x5c;/tg_argv_eol3 /;/\x5c;/tg_argv_eol5 /\$\{/${\x5cx5c}${re:0}/tg_argv_eol3 /\$\{/${\x5cx5c}${re:0}/tg_argv_eol5 /.*/${if:${my_command}==section add&&${tg_argv_eol3}=~^-?${tg_argv_eol3}}/my_opt_args /( [^- ][^ ]* +)[[:alnum:]_]+ .*/${re:1}/my_opt_args /.*/${tg_argv_eol3}/my_required_args /^-[^ ]+ +[^ ]+ +//my_required_args /.*/${my_required_args}/my_position /^[^ ]+ +([^ ]+).*/${re:1}/my_position /.*/${my_required_args}/my_content /^[^ ]+ +[^ ]+ +(.*)/${re:1}/my_content /.*/${if:${my_command}==section add?${if:${my_position}==start?unshift:${if:${my_position}==end?push}}:${if:${my_command}==section del?remove:${if:${my_command}==section clear?clear:${if:${tg_argv1}==list?${tg_argv2}}}}}/my_list_action /.*/${my_required_args}/my_sections /^([^ ]+).*/${if:${my_command}=~^section (add|set)$?${re:1}:${re:0}}/my_sections /.+/,${re:0},/my_sections / +/,/my_sections /.*/${plugins.var.${my_buffer}.list}/my_list /[^,]+/${if:${re:0}=~^[[:alnum:]_]+$?${re:0}}/my_list /[^,]+(.*)/${if:${my_list_action}==shift?${re:1}:${re:0}}/my_list /(^|,)[^,]+,*$/${if:${my_list_action}==pop?:${re:0}}/my_list /.*/${if:${my_list_action}==unshift?${my_sections}}${re:0}/my_list /.*/${re:0}${if:${my_list_action}==push?${my_sections}}/my_list /[^,]+/${if:${my_list_action}==remove&&${my_sections}=-,${re:0},?:${re:0}}/my_list /.*/${if:${my_list_action}==replace?${my_sections}:${re:0}}/my_list /.*/${if:${my_list_action}==clear?:${re:0}}/my_list /,+/,/my_list /^,|,$//my_list /^,|,$//my_sections ===$===${if:${my_command}==set?/mute /set plugins.var.${my_buffer}.general.${tg_argv2} ${tg_argv_eol3};}===my_cmds_to_run ===$===${if:${my_command}==section set?/mute /set plugins.var.${my_buffer}.section.${tg_argv3}.${tg_argv4} ${tg_argv_eol5};}===my_cmds_to_run ===-([^ ]+) +([^ ]+) +===/mute /set plugins.var.${my_buffer}.section.${my_sections}.${re:1} ${re:2};===my_opt_args ===$===${if:${my_command}==section add?${my_opt_args};/mute /set plugins.var.${my_buffer}.section.${my_sections}.content ${my_content};}===my_cmds_to_run ===$===${if:${my_command}==section list?/mute /set plugins.var.${my_buffer}.section.*;}===my_cmds_to_run /.*/${my_sections}/my_delete_sections ===([^,]+)(,|$)===/mute /unset -mask plugins.var.${my_buffer}.section.${re:1}.*;===my_delete_sections ===$===${if:${my_command}==section del?${my_delete_sections}}===my_cmds_to_run ===$===${if:${my_command}==section clear?/mute /unset -mask plugins.var.${my_buffer}.section.*;}===my_cmds_to_run ===$===${if:${my_list_action}!=?/mute /set plugins.var.${my_buffer}.list \"${my_list}\";}===my_cmds_to_run"
highmon_tools.return_code = ok
modifier_is_nick_valid.arguments = "input_text_display"
modifier_is_nick_valid.command = ""
modifier_is_nick_valid.conditions = "${tg_string_nocolor} =~ ^/nick . && ${buffer.plugin.name} == irc"
modifier_is_nick_valid.enabled = on
modifier_is_nick_valid.hook = modifier
modifier_is_nick_valid.post_action = none
modifier_is_nick_valid.regex = "===.*===${tg_string_nocolor}===my_nick ===^/nick (.+)===${re:1}===my_nick ===^-all (.+)===${re:1}===my_nick ===.*===${if:${tg_string_nocolor}=~^/nick -all[ ]?${info:python_eval,infolist = weechat.infolist_get('irc_server', '', '')\nwhile weechat.infolist_next(infolist):\n if weechat.infolist_integer(infolist, 'is_connected'): print(weechat.infolist_string(infolist, 'name') + ' ')\nweechat.infolist_free(infolist)}:${server}} ===my_servers ===[^ ]+===${re:0} ${info:irc_server_isupport_value,${re:0},NICKLEN} ${info:irc_server_isupport_value,${re:0},CASEMAPPING} ${if:${info:irc_server_isupport_value,${re:0},UTF8MAPPING}!=?${info:irc_server_isupport_value,${re:0},UTF8MAPPING}:no}===my_servers ===([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+)===${re:0} ${if:${info:irc_is_nick,${re:1},${my_nick}}!=?valid:invalid}===my_servers ===([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+)===\n${if:${re:5}==valid?${color:016,046}:${color:016,163}}${re:1} ${color:reverse} NICKLEN = ${calc:${re:2} - ${length:${my_nick}}}/${re:2}  CASEMAPPING = ${re:3}  UTF8MAPPING = ${re:4}${color:016,default}===my_servers ===.*===${re:0} ${my_servers}===tg_string"
modifier_is_nick_valid.return_code = ok
msg_auth.arguments = "5000|irc_message_auth"
msg_auth.command = ""
msg_auth.conditions = ""
msg_auth.enabled = on
msg_auth.hook = modifier
msg_auth.post_action = none
msg_auth.regex = "==^(.*(id|identify|set +password|register|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
msg_auth.return_code = ok
news_click.arguments = "news_click"
news_click.command = "/command -buffer ${buffer.full_name} core /input insert ${_chat_line_tags}\x20"
news_click.conditions = ""
news_click.enabled = on
news_click.hook = hsignal
news_click.post_action = none
news_click.regex = "/(^|.*,)url_([^,]+)(,.*|$)/${re:2}/_chat_line_tags /#/+/_chat_line_tags /.*/${base_decode:64,${re:0}}/_chat_line_tags"
news_click.return_code = ok
newsmon.arguments = "irc.freenode.##news;irc_privmsg,matrix_message"
newsmon.command = "/print -newbuffer ${tg_trigger_name} -tags ${tg_tags} \t${my_list}${my_title}${if:${eval:${plugins.var.newsmon.general.keep_url}}!=? ${my_url}}${if:${eval:${plugins.var.newsmon.general.keep_date}}!=? ${my_date}}"
newsmon.conditions = "${info:version_number} >= 50397184 && ${tg_displayed} !="
newsmon.enabled = on
newsmon.hook = print
newsmon.post_action = none
newsmon.regex = "/.*/${tg_message_nocolor}/my_site_and_sections /^\[([^]]+)\].*/${re:1}/my_site_and_sections /.*/${my_site_and_sections}/my_site / - /${color:-underline}  /my_site_and_sections / - .*//my_site /.*/${tg_message_nocolor}/my_title /^\[[^]]+\] (.*)/${re:1}/my_title /.*/${my_title}/my_date /.* ([0-9]{4}-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])/${re:1}/my_date /(.*) [0-9]{4}-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]/${re:1}/my_title /.*/${my_title}/my_url ==.* (https?://[^ ]+)==${re:1}==my_url ==(.*) https?://[^ ]+==${re:1}==my_title /.*/${my_url}/my_url_encode /.*/${base_encode:64,${my_url_encode}}/my_url_encode /\+/#/my_url_encode /$/url_${my_url_encode}/tg_tags /.*/${tg_date}/my_date_only /(.*) .*/${re:1}/my_date_only /.*/${tg_date}/my_time_only /.* (.*)/${re:1}/my_time_only /.*/${channel}/my_channel_no_prefix /^.(.)(.*)/${if:${re:1}==#&&${info:irc_server_isupport_value,${server},NETWORK}==freenode?:${re:1}}${re:2}/my_channel_no_prefix /.*/plugins.var.${tg_trigger_name}.general/my_general_prefix /.*/${if:${length:${${my_general_prefix}.bg}}!=?${${my_general_prefix}.bg}:red}/my_default_bg /.*/default/my_end.bg /.*/${plugins.var.${tg_trigger_name}.list}/my_list /[^,]+/${if:${re:0}=~^[[:alnum:]_]+$?${re:0}}/my_list /[^,]+/plugins.var.${tg_trigger_name}.section.${re:0}/my_list /[^,]+/${if:${eval_cond:${if:${length:${${re:0}.condition}}!=?${${re:0}.condition}:${if:${length:${${my_general_prefix}.condition}}!=?${${my_general_prefix}.condition}:1}}}!=?${re:0}}/my_list /[^,]+/${re:0},${re:0}/my_list /^,*[^,]+(.*)/${re:1}/my_list /.*[^,].*/${re:0},my_end/my_list /[^,]+/${if:${length:${${re:0}.fg}}!=?${re:0}.fg:${my_general_prefix}.fg},${if:${length:${${re:0}.bg}}!=?${re:0}.bg:my_default_bg},${if:${length:${${re:0}.samesep}}!=?${re:0}.samesep:${my_general_prefix}.samesep},${if:${length:${${re:0}.len}}!=?${re:0}.len:${my_general_prefix}.len},${re:0}.content/my_list /,+/,/my_list /^,|,$//my_list /([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)()()()()(),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)(,|$)/${color:${eval:${${re:1}},${eval:${${re:2}}}}} ${if:${eval:${${re:4}}}=~^[0-9]+$&&${eval:${${re:4}}}!=?${if:${lengthscr:${eval:${${re:5}}}}>=${eval:${${re:4}}}?${cutscr:+${eval:${${re:4}}},…,${eval:${${re:5}}}}:${eval:${${re:5}}}${repeat:${calc:${eval:${${re:4}}}-${lengthscr:${eval:${${re:5}}}}}, }}:${eval:${${re:5}}}}${color:${eval:${${re:1}},${eval:${${re:2}}}}} ${if:${color:${eval:${${re:2}}}}==${color:${eval:${${re:12}}}}?${color:${eval:${${re:3}}}}:${color:${eval:${${re:2}},${eval:${${re:12}}}}}}${color:reset}/my_list /.+/${re:0} /my_list"
newsmon.return_code = ok
newsmon_tools.arguments = "newsmon_tools;manage the powerline bar for ${cut:7,,${tg_trigger_name}};set <option> <value> || section add [-fg|-bg|-samesep|-len|-condition <value>] <section> <position> <content> || section del <section> [<section>...] || section set <section> <section_opt> <value> || section list|clear || list push|remove|replace|unshift <section> [<section>...] || list pop|shift|clear;          set: set a general option${\n}  section add: add a new section${\n}  section del: delete one or more sections${\n}  section set: change a section option${\n} section list: list all options from all sections${\n}section clear: delete all sections${\n}     list pop: remove the last section in the list${\n}    list push: put one or more sections at the end of the list${\n}   list shift: remove the first section in the list${\n}   list clear: clear the list${\n}  list remove: remove one or more sections in the list${\n} list unshift: put one or more sections at the beginning of the list${\n} list replace: replace the list${\n}          -fg: set the foreground color${\n}          -bg: set the background color${\n}     -samesep: foreground color for the separator used when two consecutives sections have the same background color${\n}   -condition: condition to display the section${\n}         -len: set the length (0 for unlimited)${\n}      section: name of the section${\n}     position: 'start' to insert the section at the start of the list, 'end' to add the section at the end of the list${\n}      content: content to display in the section${\n}       option: name of option: fg, bg, samesep, len, condition${if:${cut:7,,${tg_trigger_name}}==newsmon?, keep_url, keep_date}.${\n}  section_opt: name of option: fg, bg, samesep, len, condition, content.${\n}        value: new value for the option${\n}${\n}This command manages the look of the powerline bar displayed in front of each message in the ${cut:7,,${tg_trigger_name}} buffer${if:${cut:7,,${tg_trigger_name}}==newsmon? (and also let you show or hide the url and date in the message itself)}. The section subcommand manages the sections while the list subcommand manages the list of the displayed sections. A section may exist without being in the list. In this case the section will not be displayed. But even if a section is in the list, the section will appears only if the condition of the section gives true. This condition is evaluated on each new message, so depending on the message, the section will or will not be displayed. All options are evaluated. You can't use space or start the value with a - when using section add. To overcome this, use section set instead. In addition to all the variables from the print trigger, the following variables are available for you to use in any option: ${if:${cut:7,,${tg_trigger_name}}==newsmon?my_site_and_sections, my_site, my_title, my_date, my_url, my_url_encode, }my_date_only, my_time_only and my_channel_no_prefix.${\n}${\n}Exemples:${\n}  Add three sections and display them:${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 3 serv end \${server}${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 4 chan end \${my_channel_no_prefix}${\n}    /${tg_trigger_name} section add -fg white -bg 24 -len 5 nick end \${tg_tag_nick}${\n}  ${color:white,24} fr… ${color:black}${color:white} wee… ${color:black}${color:white} r3m ${color:24,default};set fg|bg|samesep|len|condition${if:${cut:7,,${tg_trigger_name}}==newsmon?|keep_url|keep_date} || section add|del|set|list|clear || list push|remove|replace|unshift|pop|shift|clear"
newsmon_tools.command = "/eval -s ${my_cmds_to_run}"
newsmon_tools.conditions = "${info:version_number} >= 50397184 && ${tg_argv_eol1} =~ ^set +[[:alnum:]_]+ . || ${tg_argv_eol1} =~ ^section +add +(-(fg|bg|samesep|len|condition) +[^- ][^ ]* +)*[[:alnum:]_]+ +(start|end|none) +. || ${tg_argv_eol1} =~ ^section +set +[[:alnum:]_]+ (fg|bg|samesep|len|condition|content) . || ${tg_argv_eol1} =~ ^section +(list|clear)$ || ${tg_argv_eol1} =~ ^section +del +[[:alnum:]_ ]+$ ||${tg_argv_eol1} =~ ^list +(shift|pop|clear)$ || ${tg_argv_eol1} =~ ^list +(unshift|push|replace|remove) +[[:alnum:]_ ]+$"
newsmon_tools.enabled = on
newsmon_tools.hook = command
newsmon_tools.post_action = none
newsmon_tools.regex = "/.*/${tg_trigger_name}/my_buffer /_tools$//my_buffer /.*/${tg_argv1}${if:${tg_argv1}!=set? ${tg_argv2}}/my_command /;/\x5c;/tg_argv_eol3 /;/\x5c;/tg_argv_eol5 /\$\{/${\x5cx5c}${re:0}/tg_argv_eol3 /\$\{/${\x5cx5c}${re:0}/tg_argv_eol5 /.*/${if:${my_command}==section add&&${tg_argv_eol3}=~^-?${tg_argv_eol3}}/my_opt_args /( [^- ][^ ]* +)[[:alnum:]_]+ .*/${re:1}/my_opt_args /.*/${tg_argv_eol3}/my_required_args /^-[^ ]+ +[^ ]+ +//my_required_args /.*/${my_required_args}/my_position /^[^ ]+ +([^ ]+).*/${re:1}/my_position /.*/${my_required_args}/my_content /^[^ ]+ +[^ ]+ +(.*)/${re:1}/my_content /.*/${if:${my_command}==section add?${if:${my_position}==start?unshift:${if:${my_position}==end?push}}:${if:${my_command}==section del?remove:${if:${my_command}==section clear?clear:${if:${tg_argv1}==list?${tg_argv2}}}}}/my_list_action /.*/${my_required_args}/my_sections /^([^ ]+).*/${if:${my_command}=~^section (add|set)$?${re:1}:${re:0}}/my_sections /.+/,${re:0},/my_sections / +/,/my_sections /.*/${plugins.var.${my_buffer}.list}/my_list /[^,]+/${if:${re:0}=~^[[:alnum:]_]+$?${re:0}}/my_list /[^,]+(.*)/${if:${my_list_action}==shift?${re:1}:${re:0}}/my_list /(^|,)[^,]+,*$/${if:${my_list_action}==pop?:${re:0}}/my_list /.*/${if:${my_list_action}==unshift?${my_sections}}${re:0}/my_list /.*/${re:0}${if:${my_list_action}==push?${my_sections}}/my_list /[^,]+/${if:${my_list_action}==remove&&${my_sections}=-,${re:0},?:${re:0}}/my_list /.*/${if:${my_list_action}==replace?${my_sections}:${re:0}}/my_list /.*/${if:${my_list_action}==clear?:${re:0}}/my_list /,+/,/my_list /^,|,$//my_list /^,|,$//my_sections ===$===${if:${my_command}==set?/mute /set plugins.var.${my_buffer}.general.${tg_argv2} ${tg_argv_eol3};}===my_cmds_to_run ===$===${if:${my_command}==section set?/mute /set plugins.var.${my_buffer}.section.${tg_argv3}.${tg_argv4} ${tg_argv_eol5};}===my_cmds_to_run ===-([^ ]+) +([^ ]+) +===/mute /set plugins.var.${my_buffer}.section.${my_sections}.${re:1} ${re:2};===my_opt_args ===$===${if:${my_command}==section add?${my_opt_args};/mute /set plugins.var.${my_buffer}.section.${my_sections}.content ${my_content};}===my_cmds_to_run ===$===${if:${my_command}==section list?/mute /set plugins.var.${my_buffer}.section.*;}===my_cmds_to_run /.*/${my_sections}/my_delete_sections ===([^,]+)(,|$)===/mute /unset -mask plugins.var.${my_buffer}.section.${re:1}.*;===my_delete_sections ===$===${if:${my_command}==section del?${my_delete_sections}}===my_cmds_to_run ===$===${if:${my_command}==section clear?/mute /unset -mask plugins.var.${my_buffer}.section.*;}===my_cmds_to_run ===$===${if:${my_list_action}!=?/mute /set plugins.var.${my_buffer}.list \"${my_list}\";}===my_cmds_to_run"
newsmon_tools.return_code = ok
no_notify_duck_command.arguments = "*;irc.*;irc_privmsg"
no_notify_duck_command.command = ""
no_notify_duck_command.conditions = "${tg_message_nocolor} =~ ^[!,.](bef|bang|reload|shop|duckstats|friends|killers)(\s|$) && ${buffer.local_variables.type} == channel"
no_notify_duck_command.enabled = on
no_notify_duck_command.hook = line
no_notify_duck_command.post_action = none
no_notify_duck_command.regex = "/.*/-1/notify_level"
no_notify_duck_command.return_code = ok
nullpointer.arguments = "nullpointer"
nullpointer.command = "/command -buffer ${buffer.full_name} core /input delete_line;/command -buffer ${buffer.full_name} core /input insert ${out}"
nullpointer.conditions = ""
nullpointer.enabled = on
nullpointer.hook = hsignal
nullpointer.post_action = none
nullpointer.regex = "/\n//out"
nullpointer.return_code = ok
server_pass.arguments = "5000|input_text_display;5000|history_add"
server_pass.command = ""
server_pass.conditions = ""
server_pass.enabled = on
server_pass.hook = modifier
server_pass.post_action = none
server_pass.regex = "==^(/(server|connect) .*-(sasl_)?password=)([^ ]+)(.*)==${re:1}${hide:*,${re:4}}${re:5}"
server_pass.return_code = ok
setdict.arguments = "irc_channel_opened;irc_pv_opened;irc_server_opened"
setdict.command = "/command -buffer ${buffer[${tg_signal_data}].full_name} * /mute /spell setdict fr,en"
setdict.conditions = "(${buffer[${tg_signal_data}].full_name} =* irc.undernet.* || (${buffer[${tg_signal_data}].full_name} =~ fr$ && ${buffer[${tg_signal_data}].local_variables.type} == channel)) && ${info:spell_dict,${buffer[${tg_signal_data}].full_name}} !~ ^fr"
setdict.enabled = on
setdict.hook = signal
setdict.post_action = none
setdict.regex = ""
setdict.return_code = ok
slack_matrix_server_search.arguments = "slack_matrix_server_search"
slack_matrix_server_search.command = ""
slack_matrix_server_search.conditions = "${info:python_version} != && ${tg_arguments} != && ${buffer[${tg_arguments}].local_variables.script_name} =~ ^(slack|matrix)$"
slack_matrix_server_search.enabled = on
slack_matrix_server_search.hook = info
slack_matrix_server_search.post_action = none
slack_matrix_server_search.regex = "/.*/${buffer[${tg_arguments}].local_variables.script_name}/my_script /.*/${buffer[${tg_arguments}].local_variables.plugin}/my_plugin /.*/${buffer[${tg_arguments}].local_variables.server}/my_server /.*/${my_plugin}.${if:${my_script}==matrix?server.}${my_server}/my_server_full_name ==\x5c\x5c==\x5c\x5c==my_server_full_name =='==\'==my_server_full_name /.*/${info:python_eval,print(weechat.buffer_search('==', '${my_server_full_name}'))}/tg_info"
slack_matrix_server_search.return_code = ok
toggle_bufautoset.arguments = "toggle_bufautoset;toggle bufautoset options;<buffer_property> <buffer_fullname>;buffer_property: name of the property${\n}buffer_fullname: name of the buffer${\n}${\n}The buffer_autoset.py script has no toggle mechanism so this command bring this functionality. Also, the script does not reset a property or localvar after deleting them. For example, if you type /buffer_autoset add irc.freenode.#weechat localvar_set_something 1, and then, /buffer_autoset del irc.freenode.#weechat.localvar_set_something, the localvar will still appears in /buffer localvar until you close and reoppen the buffer. This command will remove the localvar and hidden property upon deletion. You should use this command only for properties that take 0 or 1 as value or localvar that take 0 or 1.;;"
toggle_bufautoset.command = "/mute /buffer_autoset ${my_action} ${my_params};/command -buffer ${my_full_name} * /buffer set ${my_property} ${if:${my_action}==add?1:0}"
toggle_bufautoset.conditions = "${tg_argv2} !="
toggle_bufautoset.enabled = on
toggle_bufautoset.hook = command
toggle_bufautoset.post_action = none
toggle_bufautoset.regex = "/.*/${tg_argv1}/my_property /.*/${tg_argv2}/my_full_name /.*/${if:${buffer_autoset.buffer.${my_full_name}.${my_property}}!=?del:add}/my_action /.*/${if:${my_action}==add? ${my_full_name} ${my_property} 1: ${my_full_name}.${my_property}}/my_params"
toggle_bufautoset.return_code = ok
toggle_property.arguments = "toggle_property"
toggle_property.command = "/toggle_bufautoset ${my_property} ${my_full_name}"
toggle_property.conditions = ""
toggle_property.enabled = on
toggle_property.hook = hsignal
toggle_property.post_action = none
toggle_property.regex = "/.*/${if:${_chat}!=?${_buffer_full_name}:${full_name}}/my_full_name /.*/${if:${_chat}!=?${_buffer_plugin}:${plugin}}/my_plugin /.*/${if:${_chat}!=?${_buffer_localvar_server}:${localvar_server}}/my_server /.*/${buffer[${pointer}].local_variables.script_name}/my_script_name /.*/${if:${_key}==f?${my_plugin}.${if:${my_plugin}==irc||${my_script_name}==matrix?server.}${my_server}:${re:0}}/my_full_name /.*/${_key}/my_property /^button1.*/localvar_set_control_buffer/my_property /(?-i)^c$/localvar_set_control_buffer/my_property /(?-i)^C$/localvar_set_no_chanmon_like/my_property /(?-i)^f$/localvar_set_fold/my_property /(?-i)^h$/hidden/my_property"
toggle_property.return_code = ok
translate.arguments = "weechat_print"
translate.command = ""
translate.conditions = "${tg_tags} =~ ,exec_cmd_translated_(text|lang),"
translate.enabled = on
translate.hook = modifier
translate.post_action = none
translate.regex = "/.*/${color:*_31}${if:${tg_tags}=~,exec_cmd_translated_text,?Translation:Language}${color:reset}\t${tg_message_nocolor}/"
translate.return_code = ok
translate_target_lang.arguments = "translate_target_lang"
translate_target_lang.command = "/command -buffer ${_buffer_full_name} * /exec -norc -name translated_text trans -brief -target '${my_lang}' -no-auto '${my_chat_line_message}'"
translate_target_lang.conditions = ""
translate_target_lang.enabled = on
translate_target_lang.hook = hsignal
translate_target_lang.post_action = none
translate_target_lang.regex = "/.*/${info:spell_dict,${_buffer}}/my_main_spell_dict /,.*//my_main_spell_dict /.*/${env:LANG}/my_env_lang /_.*//my_env_lang /.*/${_buffer_localvar_translate_lang},${if:${_buffer_plugin}==irc&&${_buffer_localvar_type}=~^(channel|private)$?${buffer[${info:irc_buffer,${_buffer_localvar_server}}].local_variables.translate_lang}},${plugins.var.translate_lang},${my_main_spell_dict},${my_env_lang}/my_lang /.*/${my_lang}/my_debug /^,+//my_lang /([^,]+).*/${re:1}/my_lang /'/'\''/my_lang /.*/${_chat_line_message}/my_chat_line_message /'/'\''/my_chat_line_message"
translate_target_lang.return_code = ok
utils_date_calc_days.arguments = "date_calc_days"
utils_date_calc_days.command = ""
utils_date_calc_days.conditions = "${tg_arguments} =~ ^[0-9]{4}-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$ && ${info:python_version} !="
utils_date_calc_days.enabled = on
utils_date_calc_days.hook = info
utils_date_calc_days.post_action = none
utils_date_calc_days.regex = "/.*/${info:python_eval,from datetime import datetime; date1 = datetime.today(); date2 = datetime.strptime('${tg_arguments}', '%Y-%m-%d'); delta = date1 - date2; print(abs(delta.days))}/tg_info"
utils_date_calc_days.return_code = ok
utils_date_preferred.arguments = "date_preferred"
utils_date_preferred.command = ""
utils_date_preferred.conditions = "${tg_arguments} =~ ^[0-9]{4}-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$ && ${info:python_version} !="
utils_date_preferred.enabled = on
utils_date_preferred.hook = info
utils_date_preferred.post_action = none
utils_date_preferred.regex = "/.*/${info:python_eval,from datetime import datetime; print(datetime.strptime('${tg_arguments}', '%Y-%m-%d').strftime('%x'))}/tg_info"
utils_date_preferred.return_code = ok
utils_escape.arguments = "escape"
utils_escape.command = ""
utils_escape.conditions = "${tg_arguments} !="
utils_escape.enabled = on
utils_escape.hook = info
utils_escape.post_action = none
utils_escape.regex = "==\x5c\x5c==\x5c\x5c==tg_arguments =='==\'==tg_arguments /.*/${tg_arguments}/tg_info"
utils_escape.return_code = ok
utils_escape_shell_single_quote.arguments = "escape_shell_single_quote"
utils_escape_shell_single_quote.command = ""
utils_escape_shell_single_quote.conditions = "${tg_string}"
utils_escape_shell_single_quote.enabled = on
utils_escape_shell_single_quote.hook = modifier
utils_escape_shell_single_quote.post_action = none
utils_escape_shell_single_quote.regex = "/'/'\''/"
utils_escape_shell_single_quote.return_code = ok
utils_holiday.arguments = "holiday"
utils_holiday.command = ""
utils_holiday.conditions = "${tg_arguments} =~ ^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])$"
utils_holiday.enabled = on
utils_holiday.hook = info
utils_holiday.post_action = none
utils_holiday.regex = "/.*/${tg_arguments}/ /01-01/HAPPY NEW YEAR!/ /25-12/MERRY CHRISTMAS!/ /[0-9][0-9]-[0-9][0-9]//"
utils_holiday.return_code = ok
weather_cmd_weather.arguments = "weather;show the weather, using wttr.in, in a new buffer;<location>;;${plugins.var.weather_place}"
weather_cmd_weather.command = "/exec -noflush -norc -noln -buffer weather curl -s http://wttr.in/${tg_argv_eol1}?lang=${my_lang}"
weather_cmd_weather.conditions = "${tg_argv_eol1}"
weather_cmd_weather.enabled = on
weather_cmd_weather.hook = command
weather_cmd_weather.post_action = none
weather_cmd_weather.regex = "/ /+/tg_argv_eol1 /.*/${info:spell_dict,exec.exec.weather}/my_lang /^([^,]+).*/${re:1}/my_lang /^$/en/my_lang"
weather_cmd_weather.return_code = ok
weather_get_weather_by_shortcut.arguments = "input_text_for_buffer"
weather_get_weather_by_shortcut.command = ""
weather_get_weather_by_shortcut.conditions = "${buffer[${tg_modifier_data}].full_name} == exec.exec.weather && /${weechat.look.command_chars} !- ${cut:1,,${tg_string_nocolor}}"
weather_get_weather_by_shortcut.enabled = on
weather_get_weather_by_shortcut.hook = modifier
weather_get_weather_by_shortcut.post_action = none
weather_get_weather_by_shortcut.regex = "==.*==/weather ${re:0}"
weather_get_weather_by_shortcut.return_code = ok
weather_recreate_cmd.arguments = "plugins.var.weather_place"
weather_recreate_cmd.command = "/trigger restart weather_cmd_weather"
weather_recreate_cmd.conditions = ""
weather_recreate_cmd.enabled = on
weather_recreate_cmd.hook = config
weather_recreate_cmd.post_action = none
weather_recreate_cmd.regex = "/ /+/"
weather_recreate_cmd.return_code = ok
weather_set_weather_buffer_title.arguments = "exec.exec.weather;exec_stdout;;1"
weather_set_weather_buffer_title.command = "/buffer set title ${tg_message};/buffer set localvar_set_extra ${tg_message_nocolor}"
weather_set_weather_buffer_title.conditions = "${tg_message} =~ ^\w && ${tg_message} !~ wttr\.in|@igor_chubin"
weather_set_weather_buffer_title.enabled = on
weather_set_weather_buffer_title.hook = print
weather_set_weather_buffer_title.post_action = none
weather_set_weather_buffer_title.regex = "/^[^:]+:(.*)/${re:1}/tg_message_nocolor"
weather_set_weather_buffer_title.return_code = ok
