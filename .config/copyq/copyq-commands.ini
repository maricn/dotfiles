[Commands]
1\Command="copyq:\nvar html = ''\nvar items = selectedItemsData()\n\nfor (var i in items) {\n  var item = items[i]\n  html += '<img src=\"data:image/png;base64,' + toBase64(item['image/png']) + '\" />'\n}\n\nwrite(0, mimeText, html)"
1\Icon=\xf0ea
1\InMenu=true
1\Input=image/png
1\Name=Image to HTML (data:base64)
1\Output=text/plain
1\OutputTab=&clipboard
1\Tab=&clipboard
10\Command=copyq: plugins.itemtags.clearTags()
10\Icon=\xf02b
10\InMenu=true
10\Input=application/x-copyq-tags
10\Name=Clear all tags
11\Command=copyq: toggle()
11\Icon=\xf022
11\IsGlobalShortcut=true
11\Name=Show/hide main window
12\Automatic=true
12\Enable=false
12\Icon=\xf03e
12\Input=image/png
12\Name=Move Images to Other Tab
12\Remove=true
12\Tab=&Images
13\Command="/*\nThis adds support for Sway Wayland compositor.\n\nRequires `ydotool` utility to send copy/paste shortcuts to applications.\n\nRequires `grim` for taking screenshots and `slurp` for selecting screenshot area.\n\nGlobal shortcut commands can be triggered with:\n\n    copyq triggerGlobalShortcut {COMMAND NAME}\n\nLinks:\n- https://github.com/ReimuNotMoe/ydotool\n- https://github.com/emersion/grim\n- https://github.com/emersion/slurp\n*/\n\nfunction run() {\n    var p = execute.apply(this, arguments)\n    if (!p) {\n        throw 'Failed to start ' + arguments[0]\n    }\n    if (p.exitCode && p.stderr.length) {\n        throw 'Failed command ' + arguments[0] + ': ' + str(p.stderr)\n    }\n    return p.stdout\n}\n\nfunction swayGetTree() {\n    var tree = run('swaymsg', '-t', 'get_tree')\n    return JSON.parse(str(tree))\n}\n\nfunction swayFindFocused(tree) {\n    var nodes = tree['nodes'].concat(tree['floating_nodes'])\n    for (var i in nodes) {\n        var node = nodes[i]\n        if (node['focused'])\n            return node\n        var focusedNode = swayFindFocused(node)\n        if (focusedNode)\n            return focusedNode\n    }\n    return undefined\n}\n\nfunction sendShortcut(shortcut) {\n    run('ydotool', 'key', shortcut)\n}\n\nglobal.currentWindowTitle = function() {\n    var tree = swayGetTree()\n    var focusedNode = swayFindFocused(tree)\n    return focusedNode ? focusedNode['name'] : ''\n}\n\nglobal.paste = function() {\n    sendShortcut('shift+insert')\n}\n\nvar copy_ = global.copy\nglobal.copy = function() {\n    if (arguments.length == 0) {\n        sendShortcut('ctrl+c')\n    } else {\n        copy_.apply(this, arguments)\n    }\n}\n\nglobal.focusPrevious = function() {\n    hide()\n}\n\nvar onClipboardChanged_ = onClipboardChanged\nonClipboardChanged = function() {\n    var title = currentWindowTitle()\n    if (title)\n        setData(mimeWindowTitle, title)\n    onClipboardChanged_()\n}\n\nscreenshot = function(format, screenName) {\n    return run('grim', '-c', '-t', format || 'png', '-')\n}\n\nscreenshotSelect = function(format, screenName) {\n    var geometry = run('slurp')\n    geometry = str(geometry).trim()\n    return run('grim', '-c', '-g', geometry, '-t', format || 'png', '-')\n}\n\nglobal.triggerGlobalShortcut = function(commandName) {\n    var cmds = commands()\n    for (var i in cmds) {\n        var cmd = cmds[i]\n        if (cmd.isGlobalShortcut && cmd.name == commandName)\n            return run('copyq', undefined, cmd.cmd)\n    }\n    throw 'Failed to find global command with given name'\n}"
13\Icon=\xf2d0
13\IsScript=true
13\Name=Sway Support
14\Command="copyq:\ncopy(mimeItems, input())\nfocusPrevious()\npaste()"
14\Icon=\xf328
14\InMenu=true
14\Input=application/x-copyq-item
14\Name=Paste Items when Activated
14\Shortcut=enter, return
2\Command="copyq:\n    var html = ''\n    var items = selectedItemsData()\n\n    for (var i in items) {\n      var item = items[i]\n      html += '<p>'\n      if (mimeHtml in item) {\n        html += htmlPart[mimeHtml]\n      } else if (mimeText in item) {\n        html += item[mimeText]\n      } else if ('image/png' in item) {\n        html += '<img src=\\\"data:image/png;base64,' + toBase64(item['image/png']) + '\\\" />'\n      }\n      html += '</p>'\n    }\n\n    copy(mimeHtml, html)"
2\Icon=\xf15b
2\InMenu=true
2\Name=Image to data:base64
2\OutputTab=&clipboard
3\Command=copyq open %1
3\HideWindow=true
3\Icon=\xf0ac
3\InMenu=true
3\Match=^(https?|ftps?|file)://
3\Name=Open in &Browser
4\Command=copyq: plugins.itempinned.pin()
4\Icon=\xf08d
4\InMenu=true
4\Input=!OUTPUT
4\Name=Pin
4\Output=application/x-copyq-item-pinned
5\Command=copyq: plugins.itempinned.unpin()
5\Icon=\xf08d
5\InMenu=true
5\Input=application/x-copyq-item-pinned
5\Name=Unpin
6\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
6\Icon=\xf02b
6\InMenu=true
6\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
6\Name=Tag as \x201cImportant\x201d
7\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
7\Icon=\xf02b
7\InMenu=true
7\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
7\Name=Remove tag \x201cImportant\x201d
8\Command=copyq: plugins.itemtags.tag()
8\Icon=\xf02b
8\InMenu=true
8\Name=Add a Tag
9\Command=copyq: plugins.itemtags.untag()
9\Icon=\xf02b
9\InMenu=true
9\Input=application/x-copyq-tags
9\Name=Remove a Tag
size=14
